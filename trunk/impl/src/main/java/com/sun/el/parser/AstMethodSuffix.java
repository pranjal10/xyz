/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common Development
 * and Distribution License("CDDL") (collectively, the "License").  You
 * may not use this file except in compliance with the License. You can obtain
 * a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 * or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing the software, include this License Header Notice in each
 * file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.  If applicable, add the following below the License
 * Header, with the fields enclosed by brackets [] replaced by your own
 * identifying information: "Portions Copyrighted [year]
 * [name of copyright owner]"
 *
 * Contributor(s):
 *
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding "[Contributor]
 * elects to include this software in this distribution under the [CDDL or GPL
 * Version 2] license."  If you don't indicate a single choice of license, a
 * recipient has the option to distribute your version of this file under
 * either the CDDL, the GPL Version 2 or to extend the choice of license to
 * its licensees as provided above.  However, if you add GPL Version 2 code
 * and therefore, elected the GPL Version 2 license, then the option applies
 * only if the new code is made subject to such option by the copyright
 * holder.
 */

/* Generated By:JJTree: Do not edit this line. AstMethodSuffix.java Version 4.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=Ast,NODE_EXTENDS=,NODE_FACTORY= */

package com.sun.el.parser;

import java.lang.reflect.Method;
import javax.el.ELException;
import javax.el.MethodInfo;
import javax.el.PropertyNotFoundException;
import javax.el.PropertyNotWritableException;
import com.sun.el.lang.EvaluationContext;
import com.sun.el.util.MessageFactory;
import com.sun.el.util.ReflectionUtil;

/**
 * @author Jacob Hookom [jacob@hookom.net]
 * @author Kin-man Chung
 * @version $Change: 181177 $$DateTime: 2001/06/26 08:45:09 $$Author: kchung $
 */
public class AstMethodSuffix extends SimpleNode {

    public AstMethodSuffix(int id) {
        super(id);
    }

    private Object[] getParameters(EvaluationContext ctx) throws ELException {

        if (this.children == null)
            return new Object[] {};

        Object[] obj = new Object[this.children.length];
        for (int i = 0; i < obj.length; i++) {
            obj[i] = this.children[i].getValue(ctx);
        }
        return obj;
    }

    public MethodInfo getMethodInfo(Object base, EvaluationContext ctx)
            throws ELException {

        Method m = ReflectionUtil.findMethod(base, this.image,
                                             this.getParameters(ctx));
        return new MethodInfo(m.getName(), m.getReturnType(),
                              m.getParameterTypes());
    }

    public Class getType(Object base, EvaluationContext ctx)
            throws ELException {

        Method m = ReflectionUtil.findMethod(base, this.image,
                        this.getParameters(ctx));
        return m.getReturnType();
    }

    public Object getValue(Object base, EvaluationContext ctx)
            throws ELException {
        return ReflectionUtil.invokeMethod(base, this.image,
                    this.getParameters(ctx));
    }

}
/* JavaCC - OriginalChecksum=37373bbb222817267c57462c5dc01781 (do not edit this line) */
